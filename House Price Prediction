import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.linear_model import LinearRegression
from google.colab import files

uploaded = files.upload()
file_path = 'Housing.csv' 
data = pd.read_csv(file_path)

print(data.head())
print(data.info())
print(data.describe())
print(data.isnull().sum())

# Converting categorical variables to numeric 
data_encoded = pd.get_dummies(data, drop_first=True)



# Visualize correlations
plt.figure(figsize=(14, 12))
sns.heatmap(data_encoded.corr(), annot=True, cmap='coolwarm')
plt.show()


# Defing the features and target
X = data_encoded.drop('price', axis=1)
y = data_encoded['price']


# Spliting 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Scaleing 
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


# Building the model
model = LinearRegression()


# Traing the model
model.fit(X_train, y_train)


# Predicting on test data
y_pred = model.predict(X_test)


# Calculating MAE and RMSE
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))


print(f"Mean Absolute Error on test data: {mae}")
print(f"Root Mean Squared Error on test data: {rmse}")

# Ploting true vs predicted values
plt.scatter(y_test, y_pred)
plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.show()
